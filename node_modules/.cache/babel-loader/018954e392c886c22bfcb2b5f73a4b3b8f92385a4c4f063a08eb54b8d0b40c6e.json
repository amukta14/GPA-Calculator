{"ast":null,"code":"export const GRADE_POINTS = {\n  'S': 10,\n  'A': 9,\n  'B': 8,\n  'C': 7,\n  'D': 6,\n  'E': 5,\n  'F': 0\n};\nexport const GRADE_LABELS = Object.keys(GRADE_POINTS);\n_c = GRADE_LABELS;\nexport const MAX_SEMESTERS = 8; // Assuming 8 semesters for a typical engineering course\n\nexport const calculateCreditPoints = (grade, credits) => {\n  return GRADE_POINTS[grade] * credits;\n};\nexport const calculateSGPA = courses => {\n  if (!courses || courses.length === 0) return 0;\n\n  // Filter out non-credit courses\n  const creditCourses = courses.filter(course => course.isCreditCourse);\n  const totalCreditPoints = creditCourses.reduce((sum, course) => {\n    return sum + calculateCreditPoints(course.grade, course.credits);\n  }, 0);\n  const totalCredits = creditCourses.reduce((sum, course) => {\n    return sum + course.credits;\n  }, 0);\n\n  // Round to 2 decimal places as per guidelines\n  return totalCredits > 0 ? Number((totalCreditPoints / totalCredits).toFixed(2)) : 0;\n};\nexport const calculateCGPA = semesters => {\n  if (!semesters || semesters.length === 0) return 0;\n  let totalCreditPoints = 0;\n  let totalCredits = 0;\n  semesters.forEach(semester => {\n    if (semester.courses && semester.courses.length > 0) {\n      const semesterSGPA = calculateSGPA(semester.courses);\n      const semesterCredits = semester.courses.filter(course => course.isCreditCourse).reduce((sum, course) => sum + course.credits, 0);\n      totalCreditPoints += semesterSGPA * semesterCredits;\n      totalCredits += semesterCredits;\n    }\n  });\n\n  // Round to 2 decimal places as per guidelines\n  return totalCredits > 0 ? Number((totalCreditPoints / totalCredits).toFixed(2)) : 0;\n};\nvar _c;\n$RefreshReg$(_c, \"GRADE_LABELS\");","map":{"version":3,"names":["GRADE_POINTS","GRADE_LABELS","Object","keys","_c","MAX_SEMESTERS","calculateCreditPoints","grade","credits","calculateSGPA","courses","length","creditCourses","filter","course","isCreditCourse","totalCreditPoints","reduce","sum","totalCredits","Number","toFixed","calculateCGPA","semesters","forEach","semester","semesterSGPA","semesterCredits","$RefreshReg$"],"sources":["/Users/amukta/Documents/cgpa calculator/src/constants/grades.js"],"sourcesContent":["export const GRADE_POINTS = {\n  'S': 10,\n  'A': 9,\n  'B': 8,\n  'C': 7,\n  'D': 6,\n  'E': 5,\n  'F': 0\n};\n\nexport const GRADE_LABELS = Object.keys(GRADE_POINTS);\n\nexport const MAX_SEMESTERS = 8; // Assuming 8 semesters for a typical engineering course\n\nexport const calculateCreditPoints = (grade, credits) => {\n  return GRADE_POINTS[grade] * credits;\n};\n\nexport const calculateSGPA = (courses) => {\n  if (!courses || courses.length === 0) return 0;\n  \n  // Filter out non-credit courses\n  const creditCourses = courses.filter(course => course.isCreditCourse);\n  \n  const totalCreditPoints = creditCourses.reduce((sum, course) => {\n    return sum + calculateCreditPoints(course.grade, course.credits);\n  }, 0);\n  \n  const totalCredits = creditCourses.reduce((sum, course) => {\n    return sum + course.credits;\n  }, 0);\n  \n  // Round to 2 decimal places as per guidelines\n  return totalCredits > 0 ? Number((totalCreditPoints / totalCredits).toFixed(2)) : 0;\n};\n\nexport const calculateCGPA = (semesters) => {\n  if (!semesters || semesters.length === 0) return 0;\n  \n  let totalCreditPoints = 0;\n  let totalCredits = 0;\n  \n  semesters.forEach(semester => {\n    if (semester.courses && semester.courses.length > 0) {\n      const semesterSGPA = calculateSGPA(semester.courses);\n      const semesterCredits = semester.courses\n        .filter(course => course.isCreditCourse)\n        .reduce((sum, course) => sum + course.credits, 0);\n      \n      totalCreditPoints += semesterSGPA * semesterCredits;\n      totalCredits += semesterCredits;\n    }\n  });\n  \n  // Round to 2 decimal places as per guidelines\n  return totalCredits > 0 ? Number((totalCreditPoints / totalCredits).toFixed(2)) : 0;\n}; "],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;EAC1B,GAAG,EAAE,EAAE;EACP,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE;AACP,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC;AAACI,EAAA,GAAzCH,YAAY;AAEzB,OAAO,MAAMI,aAAa,GAAG,CAAC,CAAC,CAAC;;AAEhC,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EACvD,OAAOR,YAAY,CAACO,KAAK,CAAC,GAAGC,OAAO;AACtC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAK;EACxC,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;;EAE9C;EACA,MAAMC,aAAa,GAAGF,OAAO,CAACG,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,cAAc,CAAC;EAErE,MAAMC,iBAAiB,GAAGJ,aAAa,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,MAAM,KAAK;IAC9D,OAAOI,GAAG,GAAGZ,qBAAqB,CAACQ,MAAM,CAACP,KAAK,EAAEO,MAAM,CAACN,OAAO,CAAC;EAClE,CAAC,EAAE,CAAC,CAAC;EAEL,MAAMW,YAAY,GAAGP,aAAa,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,MAAM,KAAK;IACzD,OAAOI,GAAG,GAAGJ,MAAM,CAACN,OAAO;EAC7B,CAAC,EAAE,CAAC,CAAC;;EAEL;EACA,OAAOW,YAAY,GAAG,CAAC,GAAGC,MAAM,CAAC,CAACJ,iBAAiB,GAAGG,YAAY,EAAEE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACrF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,SAAS,IAAK;EAC1C,IAAI,CAACA,SAAS,IAAIA,SAAS,CAACZ,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAElD,IAAIK,iBAAiB,GAAG,CAAC;EACzB,IAAIG,YAAY,GAAG,CAAC;EAEpBI,SAAS,CAACC,OAAO,CAACC,QAAQ,IAAI;IAC5B,IAAIA,QAAQ,CAACf,OAAO,IAAIe,QAAQ,CAACf,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACnD,MAAMe,YAAY,GAAGjB,aAAa,CAACgB,QAAQ,CAACf,OAAO,CAAC;MACpD,MAAMiB,eAAe,GAAGF,QAAQ,CAACf,OAAO,CACrCG,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,cAAc,CAAC,CACvCE,MAAM,CAAC,CAACC,GAAG,EAAEJ,MAAM,KAAKI,GAAG,GAAGJ,MAAM,CAACN,OAAO,EAAE,CAAC,CAAC;MAEnDQ,iBAAiB,IAAIU,YAAY,GAAGC,eAAe;MACnDR,YAAY,IAAIQ,eAAe;IACjC;EACF,CAAC,CAAC;;EAEF;EACA,OAAOR,YAAY,GAAG,CAAC,GAAGC,MAAM,CAAC,CAACJ,iBAAiB,GAAGG,YAAY,EAAEE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACrF,CAAC;AAAC,IAAAjB,EAAA;AAAAwB,YAAA,CAAAxB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}